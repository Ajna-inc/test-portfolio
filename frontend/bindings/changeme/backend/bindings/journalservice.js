// @ts-check
// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

/**
 * JournalService exposes journal operations to the Wails frontend.
 * @module
 */

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import { Call as $Call, CancellablePromise as $CancellablePromise, Create as $Create } from "@wailsio/runtime";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as models$0 from "../models/models.js";

/**
 * GetAnalytics calculates analytics for the given query. TODO(impl)
 * @param {models$0.Query} q
 * @returns {$CancellablePromise<models$0.AnalyticsSummary>}
 */
export function GetAnalytics(q) {
    return $Call.ByID(4130167697, q).then(/** @type {($result: any) => any} */(($result) => {
        return $$createType0($result);
    }));
}

/**
 * ImportCSV imports trades from a CSV payload string. TODO(impl): dedupe on (symbol, entry_time, exit_time, entry_price, qty)
 * @param {string} csvPayload
 * @returns {$CancellablePromise<models$0.ImportReport>}
 */
export function ImportCSV(csvPayload) {
    return $Call.ByID(3831720096, csvPayload).then(/** @type {($result: any) => any} */(($result) => {
        return $$createType1($result);
    }));
}

/**
 * ListTrades returns trades matching the query. Useful for populating the table in UI.
 * @param {models$0.Query} q
 * @returns {$CancellablePromise<models$0.Trade[]>}
 */
export function ListTrades(q) {
    return $Call.ByID(2167639782, q).then(/** @type {($result: any) => any} */(($result) => {
        return $$createType3($result);
    }));
}

/**
 * Ping returns the app version to demonstrate an end-to-end call.
 * @returns {$CancellablePromise<string>}
 */
export function Ping() {
    return $Call.ByID(3599333781);
}

// Private type creation functions
const $$createType0 = models$0.AnalyticsSummary.createFrom;
const $$createType1 = models$0.ImportReport.createFrom;
const $$createType2 = models$0.Trade.createFrom;
const $$createType3 = $Create.Array($$createType2);
